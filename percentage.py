#!/usr/bin/env python 

import sys 
import pandas as pd
import os
import re 

def usage(exitcode=0): 
    progname = os.path.basename(sys.argv[0])
    print(f'''Usage: {progname} -i input_data.xlsx -o output_data.xlsx []
    -i input_data_path      Output from combineql.py
    -o output_data_path     Output data file
    -d participant_files_dir path to participant files''')
    sys.exit(exitcode)

def error(message, df, index): 
    '''
    Prints a message and a specified row of the data frame
    param message: error message 
    param df: data frame 
    param index: row # in data frame with error 
    '''
    print(f"ERROR: {message}")
    print(df.loc[[index]])

def get_counts(df, participant_files_path): 
    m_counts = {"Anaphor": 0, "Cataphor": 0, "Exophora": 0} 
    p_counts = {"Anaphor": 0, "Cataphor": 0, "Exophora": 0} 
    for index in df.index: 
        sid = df['SID'][index]
        tid = df['TID'][index]
        s_doc = int((int(sid.split(':')[0]) + 1)/2) # TODO: may want to check if these are in correct range (1,11) 
        t_doc = int((int(tid.split(':')[0]) + 1)/2)
        s_line = df['Source Line'][index] 
        t_line = df['Target Line'][index] 
        sourceCode = df['Source Code'][index]  
        targetCode = df['Target Code'][index] 
        relation = df['Relation'][index]
        if relation == 'Exophora' or relation == 'Cataphor': 
            speaker = get_speaker(s_doc, s_line, participant_files_path) # 0 = P, 1 = M 
        elif relation == 'Anaphor':  
            speaker = get_speaker(t_doc, t_line, participant_files_path) # 0 = P, 1 = M 
        else: 
            print(f"ERROR: {relation} not accepted!") 
        m_counts,p_counts = add_relation_counts(speaker, relation, m_counts, p_counts) 
        print(m_counts, p_counts) 
        #print(f"sid: {sid}, s_doc: {s_doc}, tid: {tid}, t_doc: {t_doc}")
    get_stats(m_counts) 
    get_stats(p_counts) 
    return df 

def get_stats(counts): 
    total = 0 
    for key in counts: 
        total += counts[key] # TODO maybe figure out why they aren't exactly the same as generated by atlas  
    a_per = counts['Anaphor']/total * 100 
    c_per = counts['Cataphor']/total * 100 
    e_per = counts['Exophora']/total * 100 
    print(f"Total: {total}, Anaphor Percentage: {a_per:.4}%, Cataphor Percentage: {c_per:.4}%, Exophora Percentage: {e_per:.4}%") 

def add_relation_counts(speaker, relation, m_counts, p_counts):
    if speaker: # M 
        m_counts[relation] += 1 
    else: # P 
        p_counts[relation] += 1 
    return m_counts,p_counts
        
def get_speaker(doc, line, ppath): 
    #print(f"In get_speaker. doc: {doc}, line: {line}") 
    orig_doc = doc 
    if doc < 10: 
        doc = '0' + str(doc) 
    filename = "participant" + str(doc) + ".txt" 
    #print(f"filename: {filename}") 
    path = ppath + filename 
    #print(f"path: {path}")
    participant_file = open(path, "r") 
    lines = participant_file.readlines() 
    myline = lines[line - 1] # account for zero indexing in a list 
    p_mark0 = f"] participant{doc}:"
    p_mark1 = f"] particpant{doc}:"
    m_mark = f"] Madeline - Virtual Assistant:" 
    #print(f"pmark: {p_mark}, mmark: {m_mark}") 
    if p_mark0 in myline or p_mark1 in myline:
        #print(f"participant found in {myline}") 
        print("P") 
        return 0
    elif m_mark in myline: 
        #print(f"madeline found in {myline}") 
        print("M") 
        return 1 
    else: 
        print(f"doc: {doc}, line: {line} neither participant or madeline found in {myline}!") 
        print(f"Trying line {line - 1}") 
        return get_speaker(orig_doc, line - 1, ppath) # try the previous line 

def main(): 
    # command line parsing 
    arguments = sys.argv[1:]
    if len(arguments) < 4: 
        usage(0)
    while arguments and arguments[0].startswith('-'):
        argument = arguments.pop(0)
        if argument == '-i':
            input_data_path = arguments.pop(0)
        elif argument == '-o':
            output_data_path = arguments.pop(0)
        elif argument == '-d': 
            participant_files_path = arguments.pop(0) 
        elif argument == '-h':
            usage(0)
        else:
            usage(1)
    
    # ensure input data files exists 
    if not os.path.exists(input_data_path):
        usage(1)

    # create data frames 
    df = pd.DataFrame() 
    df = df.append(pd.read_excel(input_data_path), ignore_index=True)
    
    # get counts of anaphora, cataphora, exophora, referent for participant and madeline 
    df = get_counts(df, participant_files_path) 
 
    # export to output file
    # print(df)
    df.to_excel(f"{output_data_path}")

if __name__ == '__main__': 
    main() 
